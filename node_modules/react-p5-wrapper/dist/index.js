"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var p5_1 = __importDefault(require("p5"));
var react_1 = __importDefault(require("react"));
var P5Wrapper = /** @class */ (function (_super) {
    __extends(P5Wrapper, _super);
    function P5Wrapper(props) {
        var _this = _super.call(this, props) || this;
        _this.wrapper = null;
        _this.state = __assign(__assign({}, props), { canvas: null, 
            // TODO: find a workaround since refs in state are bad practice
            wrapper: _this.wrapper });
        return _this;
    }
    P5Wrapper.getDerivedStateFromProps = function (props, state) {
        if (state.sketch !== props.sketch) {
            var sketch = props.sketch;
            var canvas = new p5_1.default(sketch, state.wrapper);
            state.canvas.remove();
            return __assign(__assign({}, state), { sketch: sketch, canvas: canvas });
        }
        // @ts-ignore
        // @TODO: fix type definitions
        if (state.canvas && state.canvas.myCustomRedrawAccordingToNewPropsHandler) {
            // @ts-ignore
            // @TODO: fix type definitions
            state.canvas.myCustomRedrawAccordingToNewPropsHandler(props);
        }
        return state;
    };
    P5Wrapper.prototype.componentDidMount = function () {
        var canvas = new p5_1.default(this.state.sketch, this.wrapper);
        // @ts-ignore
        // @TODO: fix type definitions
        if (canvas.myCustomRedrawAccordingToNewPropsHandler) {
            // @ts-ignore
            // @TODO: fix type definitions
            canvas.myCustomRedrawAccordingToNewPropsHandler(this.props);
        }
        this.setState(__assign(__assign({}, this.state), { canvas: canvas, wrapper: this.wrapper }));
    };
    P5Wrapper.prototype.componentWillUnmount = function () {
        if (this.state.canvas !== null) {
            this.state.canvas.remove();
        }
    };
    P5Wrapper.prototype.render = function () {
        var _this = this;
        return react_1.default.createElement("div", { ref: function (wrapper) { return _this.wrapper = wrapper; } }, this.props.children);
    };
    return P5Wrapper;
}(react_1.default.Component));
exports.default = P5Wrapper;
